const supabase = require('../database/supabaseClient');

// Mapeamento de tipos do Sequelize para PostgreSQL
const DataTypes = {
    STRING: 'text',
    INTEGER: 'integer',
    BIGINT: 'bigint',
    FLOAT: 'real',
    DOUBLE: 'double precision',
    BOOLEAN: 'boolean',
    DATE: 'timestamp with time zone',
    JSON: 'jsonb',
    UUID: 'uuid',
    ARRAY: (type) => `${type}[]`
};

// Função similar ao connection.define
async function define(tableName, fields) {
    try {
        // Converter os campos para SQL
        const columns = Object.entries(fields).map(([fieldName, fieldType]) => {
            const sqlType = typeof fieldType === 'string' ? fieldType : DataTypes[fieldType];
            return `${fieldName} ${sqlType}`;
        });

        // Adicionar colunas padrão
        const allColumns = [
            'id bigint generated by default as identity primary key',
            ...columns,
            'created_at timestamp with time zone default timezone(\'utc\'::text, now()) not null',
            'updated_at timestamp with time zone default timezone(\'utc\'::text, now()) not null'
        ];

        // Criar SQL
        const sql = `
            create table if not exists ${tableName} (
                ${allColumns.join(',\n                ')}
            );

            -- Trigger para atualizar updated_at
            create or replace function update_updated_at_column()
            returns trigger as $$
            begin
                new.updated_at = now();
                return new;
            end;
            $$ language plpgsql;

            drop trigger if exists update_${tableName}_updated_at on ${tableName};
            create trigger update_${tableName}_updated_at
                before update on ${tableName}
                for each row
                execute function update_updated_at_column();
        `;

        // Executar SQL
        const { error } = await supabase.rpc('exec_sql', { query: sql });

        if (error) {
            console.error('Erro ao criar tabela:', error);
            return null;
        }

        console.log(`Tabela ${tableName} criada com sucesso!`);

        // Retornar um objeto com métodos similares ao Sequelize
        return {
            tableName,
            async create(data) {
                const { data: result, error } = await supabase
                    .from(tableName)
                    .insert([data])
                    .select();
                if (error) throw error;
                return result[0];
            },
            async findAll() {
                const { data, error } = await supabase
                    .from(tableName)
                    .select('*');
                if (error) throw error;
                return data;
            },
            async findByPk(id) {
                const { data, error } = await supabase
                    .from(tableName)
                    .select('*')
                    .eq('id', id)
                    .single();
                if (error) throw error;
                return data;
            },
            async update(data, id) {
                const { data: result, error } = await supabase
                    .from(tableName)
                    .update(data)
                    .eq('id', id)
                    .select();
                if (error) throw error;
                return result[0];
            },
            async destroy(id) {
                const { error } = await supabase
                    .from(tableName)
                    .delete()
                    .eq('id', id);
                if (error) throw error;
                return true;
            }
        };
    } catch (err) {
        console.error('Erro:', err);
        return null;
    }
}

module.exports = { define, DataTypes }; 